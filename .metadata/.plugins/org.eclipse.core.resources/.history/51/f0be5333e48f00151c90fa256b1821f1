import static java.lang.System.*;

class Tree {

    private class Node {
        String key;
        Queue<Integer> value;
        Node left;
        Node right;
    }
    private Node root;

    private void debugHelper(Node tree, int depth) {
        if(tree == null){
        	return;
        }else{
        	System.out.print(tree.key);
        }
    }

    private void outputHelper(Node tree) {
        // Your code here might be recursive
        throw new UnsupportedOperationException();
    }

    public void insert(String key, Integer linenum) {
    	Node n = new Node();
    	n.key = key;
    	Queue<Integer> q = new Queue<Integer>();
    	q.insert(linenum);
    	n.value = q;
        if(root == null){
        	root = n;
        	return;
        }
        insertNode(root, n);
    }
    
    private void insertNode(Node currNode, Node newNode){
    	//System.out.println(currNode.key.compareTo(newNode.key));
    	if(currNode.key.compareTo(newNode.key) > 0){
    		//System.out.println(newNode.key + "1");
    		if(currNode.left == null){
    			currNode.left = newNode;
    			return;
    		}else{
    			insertNode(currNode.left, newNode);
    		}
    	}else if(currNode.key.compareTo(newNode.key) < 0){
    		//System.out.println(newNode.key + "-1");
    		if(currNode.right == null){
    			currNode.right = newNode;
    			return;
    		}else{
    			insertNode(currNode.right, newNode);
    		}
    	}else{
    		//System.out.println(newNode.key + "0");
    		if(newNode.value == null){
    			System.out.println("KAPOW");
    		}
    		currNode.value.insert(newNode.value.iterator().next());
    	}
    }

    public void debug() {
        // Show debug output of tree
        debugHelper(root, 0);
    }

    public void output() {
        // Show sorted words with lines where each word appears
        outputHelper(root);
    }

}
